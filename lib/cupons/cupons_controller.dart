import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:seus_cachoss/models/cupom_model.dart';

class CuponsController {
  Dio dio = new Dio();
  CupomModel cupomModel = CupomModel();

  Future<List<CupomModel>> listarCupom() async {
    List<CupomModel> cupons = List.empty(growable: true);
    try {
      dynamic response = await dio.get(
          'http://localhost:8080/api/usuarioapi/couponsApi',
          options: Options(contentType: 'application/json; charset=UTF-8'));
      if (response.statusCode == 200) {
        for (Map<String, dynamic> item in response.data) {
          CupomModel p = CupomModel();
          p.setId(item.values.elementAt(0));
          p.setNome(nome: item.values.elementAt(2));
          p.setDesconto(desconto: item.values.elementAt(3));
          p.setStatusCupom(statusCupom: item.values.elementAt(5));
          p.setCodigo(codigo: item.values.elementAt(6));
          if (item.values.elementAt(4) != null)
            p.setImagem(base64.decode(item.values.elementAt(4)));
          else
            p.setImagem(base64.decode(
                ''));
          print(item.values.elementAt(0));
          print(item.values.elementAt(2));
          print(item.values.elementAt(3));
          print(item.values.elementAt(6));
          print(item.values.elementAt(5));
          print(item.values.elementAt(4));
          cupons.add(p);
        }
      }
    } catch (e) {
      print(e);
    }
    return cupons;
  }
}
